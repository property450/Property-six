'use client';
import { useEffect, useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup, Circle } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { useRouter } from 'next/router';
import { supabase } from '@/supabaseClient';
import PropertyCard from './PropertyCard';
import { Input } from '@/components/ui/input';
import PriceRangeSelector from '@/components/PriceRangeSelector';
import TypeSelector from '@/components/TypeSelector';
import DistanceSelector from '@/components/DistanceSelector';

const customIcon = new L.Icon({
Â  iconUrl: 'https://unpkg.com/leaflet@1.9.3/dist/images/marker-icon.png',
Â  iconSize: [25, 41],
Â  iconAnchor: [12, 41],
Â  popupAnchor: [1, -34],
Â  shadowUrl: 'https://unpkg.com/leaflet@1.9.3/dist/images/marker-shadow.png',
Â  shadowSize: [41, 41],
});

export default function MapWithMarkersClient({ center }) {
Â  const [properties, setProperties] = useState([]);
Â  const [filtered, setFiltered] = useState([]);
Â  const [minPrice, setMinPrice] = useState(0);
Â  const [maxPrice, setMaxPrice] = useState(50000000);
Â  const [type, setType] = useState('');
Â  const [distance, setDistance] = useState(5); // km

Â  const fetchProperties = async () => {
Â  Â  const { data, error } = await supabase.from('properties').select('*');
Â  Â  if (!error && data) setProperties(data);
Â  };

Â  useEffect(() => {
Â  Â  fetchProperties();
Â  }, []);

Â  useEffect(() => {
Â  Â  if (!center || !center.lat || !center.lng || isNaN(center.lat) || isNaN(center.lng)) {
Â  Â  Â  setFiltered([]);
Â  Â  Â  return;
Â  Â  }

Â  Â  const filteredList = properties.filter((property) => {
Â  Â  Â  const lat = Number(property.lat);
Â  Â  Â  const lng = Number(property.lng);
Â  Â  Â  if (isNaN(lat) || isNaN(lng)) return false;

Â  Â  Â  const d = getDistance(center.lat, center.lng, lat, lng);
Â  Â  Â  return (
Â  Â  Â  Â  property.price >= minPrice &&
Â  Â  Â  Â  property.price <= maxPrice &&
Â  Â  Â  Â  (!type || property.type?.includes(type)) &&
Â  Â  Â  Â  d <= distance
Â  Â  Â  );
Â  Â  });

Â  Â  setFiltered(filteredList);
Â  }, [properties, minPrice, maxPrice, type, distance, center]);

Â  const getDistance = (lat1, lon1, lat2, lon2) => {
Â  Â  const R = 6371; // km
Â  Â  const dLat = ((lat2 - lat1) * Math.PI) / 180;
Â  Â  const dLon = ((lon2 - lon1) * Math.PI) / 180;
Â  Â  const a =
Â  Â  Â  Math.sin(dLat / 2) * Math.sin(dLat / 2) +
Â  Â  Â  Math.cos((lat1 * Math.PI) / 180) *
Â  Â  Â  Â  Math.cos((lat2 * Math.PI) / 180) *
Â  Â  Â  Â  Math.sin(dLon / 2) *
Â  Â  Â  Â  Math.sin(dLon / 2);
Â  Â  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
Â  Â  return R * c;
Â  };

Â  return (
Â  Â  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
Â  Â  Â  <div className="md:col-span-1 p-4 space-y-4">
Â  Â  Â  Â  <PriceRangeSelector minPrice={minPrice} maxPrice={maxPrice} setMinPrice={setMinPrice} setMaxPrice={setMaxPrice} />
Â  Â  Â  Â  <TypeSelector type={type} setType={setType} />
Â  Â  Â  Â  <DistanceSelector distance={distance} setDistance={setDistance} />
Â  Â  Â  </div>

Â  Â  Â  <div className="md:col-span-3 h-[80vh] relative z-0">
Â  Â  Â  Â  {center?.lat && center?.lng && !isNaN(center.lat) && !isNaN(center.lng) ? (
Â  Â  Â  Â  Â  <MapContainer center={[center.lat, center.lng]} zoom={13} scrollWheelZoom className="h-full z-0">
Â  Â  Â  Â  Â  Â  <TileLayer
Â  Â  Â  Â  Â  Â  Â  attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
Â  Â  Â  Â  Â  Â  Â  url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <Circle center={[center.lat, center.lng]} radius={distance * 1000} pathOptions={{ color: 'blue' }} />
Â  Â  Â  Â  Â  Â  {filtered.map((property) => (
Â  Â  Â  Â  Â  Â  Â  <Marker
Â  Â  Â  Â  Â  Â  Â  Â  key={property.id}
Â  Â  Â  Â  Â  Â  Â  Â  position={[Number(property.lat), Number(property.lng)]}
Â  Â  Â  Â  Â  Â  Â  Â  icon={customIcon}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <Popup minWidth={240}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <PropertyCard property={property} />
Â  Â  Â  Â  Â  Â  Â  Â  </Popup>
Â  Â  Â  Â  Â  Â  Â  </Marker>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </MapContainer>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <p className="text-center text-gray-500 pt-10">ðŸ§­ åœ°å›¾ä¸­å¿ƒç‚¹æœªå®šä¹‰</p>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}
